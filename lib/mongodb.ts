import { MongoClient, type Db, type Collection } from "mongodb"

interface WhitelistServer {
  _id?: string
  gameId: string
  gameName?: string
  addedAt: Date
  lastCheck?: Date
}

// Donn√©es de d√©monstration par d√©faut
const DEFAULT_SERVERS: Omit<WhitelistServer, "_id" | "addedAt">[] = [
  {
    gameId: "920587237",
    gameName: "Adopt Me!",
  },
  {
    gameId: "142823291",
    gameName: "Murder Mystery 2",
  },
  {
    gameId: "286090429",
    gameName: "Arsenal",
  },
  {
    gameId: "537413528",
    gameName: "Build A Boat For Treasure",
  },
  {
    gameId: "606849621",
    gameName: "Jailbreak",
  },
  {
    gameId: "189707",
    gameName: "Natural Disaster Survival",
  },
  {
    gameId: "155615604",
    gameName: "Prison Life",
  },
  {
    gameId: "1224212277",
    gameName: "Mad City",
  },
]

class MongoDBConnection {
  private client: MongoClient | null = null
  private db: Db | null = null
  private collection: Collection<WhitelistServer> | null = null
  private isConnected = false
  private initialized = false

  // URI MongoDB fournie par l'utilisateur
  private readonly MONGODB_URI =
    process.env.MONGODB_URI ||
    "mongodb+srv://hugodubois1462:6TGH1fatWZWr1EWs@obsidiansite.nyg5yqu.mongodb.net/?retryWrites=true&w=majority&appName=ObsidianSite"
  private readonly DB_NAME = "Obsidian Whitelist"
  private readonly COLLECTION_NAME = "servers"

  constructor() {
    this.initialize()
  }

  // Initialisation de la connexion MongoDB
  private async initialize() {
    if (this.initialized) return

    try {
      console.log("üçÉ [MongoDB] Connexion √† la base de donn√©es...")
      console.log(`üçÉ [MongoDB] Database: ${this.DB_NAME}`)
      console.log(`üçÉ [MongoDB] Collection: ${this.COLLECTION_NAME}`)

      // Cr√©er le client MongoDB
      this.client = new MongoClient(this.MONGODB_URI)

      // Se connecter
      await this.client.connect()

      // S√©lectionner la base de donn√©es
      this.db = this.client.db(this.DB_NAME)

      // S√©lectionner la collection
      this.collection = this.db.collection<WhitelistServer>(this.COLLECTION_NAME)

      // Cr√©er un index sur gameId pour des recherches rapides
      await this.collection.createIndex({ gameId: 1 }, { unique: true })

      this.isConnected = true
      this.initialized = true

      console.log("‚úÖ [MongoDB] Connexion √©tablie avec succ√®s")

      // V√©rifier si la collection est vide et ajouter les donn√©es par d√©faut
      const count = await this.collection.countDocuments()
      if (count === 0) {
        console.log("üéØ [MongoDB] Collection vide - Ajout des serveurs de d√©monstration...")
        await this.createDefaultServers()
      } else {
        console.log(`üìä [MongoDB] ${count} serveurs trouv√©s dans la collection`)
      }
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur de connexion:", error)
      this.isConnected = false
      this.initialized = false
      throw error
    }
  }

  // Cr√©er les serveurs par d√©faut
  private async createDefaultServers() {
    if (!this.collection) return

    try {
      const now = new Date()
      const serversToInsert: WhitelistServer[] = []

      for (let i = 0; i < DEFAULT_SERVERS.length; i++) {
        const serverData = DEFAULT_SERVERS[i]
        const server: WhitelistServer = {
          gameId: serverData.gameId,
          gameName: serverData.gameName,
          addedAt: new Date(now.getTime() - i * 60000), // √âchelonner les dates
          lastCheck: Math.random() > 0.5 ? new Date(now.getTime() - Math.random() * 86400000) : undefined,
        }
        serversToInsert.push(server)
      }

      await this.collection.insertMany(serversToInsert)
      console.log(`‚úÖ [MongoDB] ${DEFAULT_SERVERS.length} serveurs de d√©monstration ajout√©s`)
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur cr√©ation donn√©es par d√©faut:", error)
    }
  }

  // Ajouter un serveur
  async addServer(gameId: string, gameName?: string): Promise<{ success: boolean; error?: string }> {
    try {
      await this.initialize()
      if (!this.collection) throw new Error("Collection non initialis√©e")

      console.log(`‚ûï [MongoDB] Ajout serveur: ${gameId}`)

      const newServer: WhitelistServer = {
        gameId,
        gameName,
        addedAt: new Date(),
      }

      await this.collection.insertOne(newServer)
      console.log(`‚úÖ [MongoDB] Serveur ajout√©: ${gameId}`)
      return { success: true }
    } catch (error: any) {
      console.error("‚ùå [MongoDB] Erreur ajout:", error)

      if (error.code === 11000) {
        return { success: false, error: "Serveur d√©j√† existant" }
      }

      return { success: false, error: "Erreur lors de l'ajout" }
    }
  }

  // Supprimer un serveur
  async removeServer(gameId: string): Promise<{ success: boolean; error?: string }> {
    try {
      await this.initialize()
      if (!this.collection) throw new Error("Collection non initialis√©e")

      console.log(`‚ûñ [MongoDB] Suppression serveur: ${gameId}`)

      const result = await this.collection.deleteOne({ gameId })

      if (result.deletedCount === 0) {
        return { success: false, error: "Serveur non trouv√©" }
      }

      console.log(`‚úÖ [MongoDB] Serveur supprim√©: ${gameId}`)
      return { success: true }
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur suppression:", error)
      return { success: false, error: "Erreur lors de la suppression" }
    }
  }

  // V√©rifier si un serveur est whitelist√©
  async isWhitelisted(gameId: string): Promise<boolean> {
    try {
      await this.initialize()
      if (!this.collection) throw new Error("Collection non initialis√©e")

      const server = await this.collection.findOne({ gameId })

      if (server) {
        // Mettre √† jour la derni√®re v√©rification
        await this.collection.updateOne({ gameId }, { $set: { lastCheck: new Date() } })
      }

      const found = !!server
      console.log(`üîç [MongoDB] V√©rification ${gameId}: ${found ? "AUTORIS√â" : "REFUS√â"}`)
      return found
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur v√©rification:", error)
      return false
    }
  }

  // R√©cup√©rer tous les serveurs
  async getAllServers(): Promise<WhitelistServer[]> {
    try {
      await this.initialize()
      if (!this.collection) throw new Error("Collection non initialis√©e")

      const servers = await this.collection.find({}).sort({ addedAt: -1 }).toArray()

      console.log(`üìã [MongoDB] R√©cup√©ration de ${servers.length} serveurs`)
      return servers
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur r√©cup√©ration:", error)
      return []
    }
  }

  // Obtenir les statistiques
  async getStats() {
    try {
      await this.initialize()
      if (!this.collection) throw new Error("Collection non initialis√©e")

      const total = await this.collection.countDocuments()
      const withLastCheck = await this.collection.countDocuments({ lastCheck: { $exists: true } })

      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)
      const recentChecks = await this.collection.countDocuments({
        lastCheck: { $gte: oneDayAgo },
      })

      return { total, withLastCheck, recentChecks }
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur stats:", error)
      return { total: 0, withLastCheck: 0, recentChecks: 0 }
    }
  }

  // Tester la connexion
  async testConnection(): Promise<boolean> {
    try {
      await this.initialize()

      if (!this.client) return false

      // Ping la base de donn√©es
      await this.client.db("admin").command({ ping: 1 })

      console.log("‚úÖ [MongoDB] Test de connexion r√©ussi")
      return true
    } catch (error) {
      console.error("‚ùå [MongoDB] Test de connexion √©chou√©:", error)
      this.isConnected = false
      return false
    }
  }

  // R√©initialiser avec les donn√©es par d√©faut
  async resetToDefault(): Promise<void> {
    try {
      await this.initialize()
      if (!this.collection) throw new Error("Collection non initialis√©e")

      console.log("üîÑ [MongoDB] R√©initialisation avec donn√©es par d√©faut...")

      // Supprimer tous les documents existants
      await this.collection.deleteMany({})

      // Ajouter les serveurs par d√©faut
      await this.createDefaultServers()

      console.log("‚úÖ [MongoDB] R√©initialisation termin√©e")
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur r√©initialisation:", error)
      throw error
    }
  }

  // Vider la base de donn√©es
  async clearAll(): Promise<void> {
    try {
      await this.initialize()
      if (!this.collection) throw new Error("Collection non initialis√©e")

      console.log("üóëÔ∏è [MongoDB] Suppression de tous les serveurs...")

      const result = await this.collection.deleteMany({})

      console.log(`‚úÖ [MongoDB] ${result.deletedCount} serveurs supprim√©s`)
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur suppression:", error)
      throw error
    }
  }

  // Fermer la connexion
  async close(): Promise<void> {
    try {
      if (this.client) {
        await this.client.close()
        console.log("üîå [MongoDB] Connexion ferm√©e")
      }
    } catch (error) {
      console.error("‚ùå [MongoDB] Erreur fermeture:", error)
    }
  }

  // Obtenir les informations de connexion
  getConnectionInfo() {
    return {
      connected: this.isConnected,
      database: this.DB_NAME,
      collection: this.COLLECTION_NAME,
      uri: this.MONGODB_URI.replace(/\/\/[^:]+:[^@]+@/, "//***:***@"), // Masquer les credentials
    }
  }
}

export const mongodb = new MongoDBConnection()

// Fermer la connexion lors de l'arr√™t de l'application
process.on("SIGINT", async () => {
  await mongodb.close()
  process.exit(0)
})

process.on("SIGTERM", async () => {
  await mongodb.close()
  process.exit(0)
})
